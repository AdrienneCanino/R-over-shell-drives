#so of all of Jen's analysis folder, 1702 files, there are NO wav files in there?
df_ax81 %>%
filter(subdirectory4 == "Jen's Analysis folder") %>%
filter(subdirectory5 == "SB - Echosounder") %>%
group_by(subdirectory6)
#so of all of Jen's analysis folder, 1702 files, there are NO wav files in there?
df_ax81 %>%
filter(subdirectory4 == "Jen's Analysis folder") %>%
filter(subdirectory5 == "SB - Echosounder") %>%
group_by(subdirectory6)%>%
summarise(n=n())
#so that means I can write them out
write_lines(df_wavs81$file_path, "Documents/R-over-shell-drives/ax81-WAV-file-paths.txt")
write_lines(df_ax81$file_path[csvs_index81], "Documents/R-over-shell-drives/ax81-CSV-file-paths.txt")
unique(df_wavs81$subdirectory5)
unique(df_wavs81$subdirectory6)
sum(df_wavs81$subdirectory3 == "fw")
levels(df_wavs81$subdirectory3)
df_wavs81 %>%
group_by(subdirectory3) %>%
summarise(n=n()) %>%
view()
df_wavs81 %>%
group_by(subdirectory3) %>%
summarise(n=n()) %>%
#that's confusing, there are the factor levels of it in the dataframe, but they do not get grouped with anything to count in the summarise function
#so there are not files, there's just, the factor level of the subdirectory?
tail(df_wavs81, 25) %>% view()
df_wavs81 %>%
group_by(subdirectory3) %>%
summarise(n=n()) %>%
#that's confusing, there are the factor levels of it in the dataframe, but they do not get grouped with anything to count in the summarise function
#so there are not files, there's just, the factor level of the subdirectory?
tail(df_wavs81, 25) %>% view()
df_wavs81 %>%
group_by(subdirectory3) %>%
summarise(n=n())
tail(df_wavs81, 25) %>% view()
df_wavs81 %>%
filter(subdirectory3 == "RECYCLER")
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4)#%>%
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4)%>%
view()
#make each column factor
df_wavs81 %>%
mutate_if(is.character,funs(factor(.)))
#group by subdirectory5, aonly in "fw" subdirectory3, and count
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory5) %>%
summarise(n=n())
#group by subdirectory5, aonly in "fw" subdirectory3, and count
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory5) %>%
summarise(n=n())
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectly6")])
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")])
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")], incomparables = FALSE)
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")], incomparables = FALSE, fromLast=TRUE)
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")], incomparables = FALSE, fromLast=FALSE)
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")], incomparables != FALSE, fromLast=FALSE)
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5","subdirectory6")], incomparables != FALSE, fromLast=TRUE)
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4", "subdirectory5")])
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,c("subdirectory4")])
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
unique(df_wavs81[,"subdirectory4"])
sfolders <- df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(unique(df_wavs81[,"subdirectory4"]))
unique(df_wavs81[,"subdirectory4"])
sfolders <- unique(df_wavs81[,"subdirectory4"])
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(as.character(sfolders))
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(as.character(sfolders))%>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(sfolders)%>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by("subdirectory4")%>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4)%>%
summarise(n=n())
#group by subdirectory5, aonly in "fw" subdirectory3, and count
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory5) %>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4)%>%
group_by(subdirectory5) %>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
summarise(n=n(subdirectory4))
#group by subdirectory5, aonly in "fw" subdirectory3, and count
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4, subdirectory5) %>%
summarise(n=n())
df_wavs81 %>%
filter(subdirectory3 == "fw") %>%
group_by(subdirectory4, subdirectory5) %>%
summarise(n=n())
df_wavs81 %>%
group_by(subdirectory3, subdirectory4, subdirectory5) %>%
summarise(n=n())
df_wavs81 %>%
group_by(subdirectory3, subdirectory4, subdirectory5, subdirectory6) %>%
summarise(n=n())
#now we're talking
df_wavs81 %>%
count(subdirectory3, subdirectory4, subdirectory5, subdirectory6)
#now we're talking
df_wavs81 %>%
count(subdirectory3, subdirectory4, subdirectory5, subdirectory6, sort = TRUE)
df_wavs81 %>%
filter(subdirectory3="fw") %>%
count(subdirectory4, subdirectory5, subdirectory6, subdirectory7, sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="fw") %>%
count(subdirectory4, subdirectory5, subdirectory6, subdirectory7, sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="fw") %>%
count(subdirectory4, subdirectory5, subdirectory6, subdirectory7, subdirectory8, sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="fw") %>%
count(subdirectory4, subdirectory5, subdirectory6, subdirectory7, subdirectory8, subdirectory9, sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="fw") %>%
count(subdirectory4, subdirectory5, subdirectory6, subdirectory7, subdirectory8, subdirectory9, sort=TRUE) %>%
view()
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
#subdirectory6, subdirectory7,
#subdirectory8, subdirectory9,
sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
subdirectory6, subdirectory7,
#subdirectory8, subdirectory9,
sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
subdirectory6, subdirectory7,
subdirectory8, subdirectory9,
sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
subdirectory6, #subdirectory7,
#subdirectory8, subdirectory9,
sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
subdirectory6, subdirectory7,
#subdirectory8, subdirectory9,
sort=TRUE)
df_wavs81 %>%
filter(subdirectory3=="shell") %>%
count(subdirectory4, subdirectory5,
subdirectory6, #subdirectory7,
#subdirectory8, subdirectory9,
sort=TRUE)
#install.packages('tidyverse')
library("tidyverse")
library("stringi")
#make a vector that builds the header for this dataframe
columnNames = c("path","directory","subdirectory1", "subdirectory2","subdirectory3","subdirectory4","subdirectory5","subdirectory6","subdirectory7","subdirectory8","subdirectory9","subdirectory10" )
##check your 20 --- DO THIS BY HAND--------------------------
getwd() #assumes answer is git repo folder and new.invs is a sibling folder
setwd("~/Documents/R-over-shell-drives") #make sure you're in the repo as needed
#write and assign the thing by reading in the lines, carefully, this is a finicky piece of code because of the fileath
df_AX81 <- read.delim("../new.invs/shell.ax81", sep="/",
col.names = columnNames, header = FALSE, comment.char="",
blank.lines.skip=FALSE, fill =TRUE)
#make a column in a dataframe that has the filepath included
df_ax81 <-
as_tibble(df_AX81) %>%
mutate_all(as.character) %>%
unite(col = "file_path", 1:12, remove = FALSE, na.rm = T, sep = "/")
#trim the ends where NAs somehow, perpetuated?
df_ax81$file_path <- trimws(df_ax81$file_path, which="right", whitespace="/")
#De-dupe the dataframe
df_ax81 <- df_ax81 %>%
distinct()
#use that col of file paths to find the csvs in this drive
csvs_index81 <-str_which(df_ax81$file_path, regex(".csv$", ignore_case=TRUE))
length(csvs_index81) #3, as expected
df_csvs81 <- df_ax81[csvs_index81,]
#same, find the wavs in this drive
wavs_index81 <- str_which(df_ax81$file_path, regex(".wav$", ignore_case=TRUE, ))
length(wavs_index81)
#so 9342 wav files
df_wavs81 <-df_ax81[wavs_index81,]
#Remove anything from my environment that I don't need now
rm(df_AX81, df_csvs81, df_wavs81,
csvs_index81, wavs_index81)
#these deployment info files, the csvs identified in the export on line 55, gotta be in the repo, gotta have those csvs from Shell's messy harddrives in a subdir 'CSV-copied'
#wd and path can be touchy here
files <- list.files(path="./CSV-copied", pattern ="*.csv")
deploydflst <- NULL
i <- 1
testlst <-  NULL
#operate the loop in the folder where the csvs exist DO THIS PART BY HAND
setwd("./CSV-copied")
#pull in the deploymentInfo csvs as ugly dataframes in order to extract their fixed information (hopefully)
for (f in files){
#look for number of cols
wideness <- count.fields(f,sep=",", comment.char = "",skip=5,blank.lines.skip = FALSE)
wideness <- max(wideness)
#make dataframe
dat <-read.table(f,
header=F, sep="," ,
blank.lines.skip = FALSE, comment.char="",
colClasses = c("character","character", "character"),
col.names = 1:wideness) #read table
nam <- paste("deployDF", i, sep = "_")
print(nam)
assign(nam, dat)
#make a list to iterate through
testlst[[i]] <- nam
i <- i+1
}
#that list isn't what I want, it's just names without pointing to the object DF in R, but this is:
deploydflst <- lapply(testlst, get)
#clean up what I don't need from that loop
rm(wideness, dat, nam,f)
freqPoints <- NULL
i=1
cleandeployDFslst = NULL
for (thing in deploydflst){
#pull those three values out
clientid <- as.character(thing[3,2])
region<- as.character(thing[3,3])
period <- as.character(thing[3,4])
freqPoints <- (thing[5,2:(length(thing))])
freqPoints <-
freqPoints %>% stri_remove_empty(na_empty=TRUE) %>% as.character()
print(freqPoints)
#build the header for this one
#less that column that describes but no with value the freqpoints cols
#needs stringi library
tmp <- thing[6,1:24] %>% as.character()
print(tmp)
hdr <- c(tmp, freqPoints)
cat("this is the header",hdr)
#trim the df to the cols/rows of deploy info
thing <- thing %>%
slice(-c(1:6))
colnames(thing) <- hdr
print(head(thing))
#add the columns of the fixed information
thing <-  add_column(thing, .before="recorderId", clientid=clientid,region=region,period=period)
#rename the deployment dataframe
nam <- paste("cleandeployDF", i, sep = "_")
print(nam)
assign(nam, thing)
cleandeployDFslst[[i]] <- nam
i <- i+1
}
#make a list pointing at the data frame object not just the names of those objects
cleandeplydflst <- lapply(cleandeployDFslst, get)
cleandeplydflst
#Clean up my environmentafter that loop
rm(freqPoints, files, hdr, i, nam, tmp, wideness, f, clientid, region, period)
rm(thing, dat, testlst, deploydflst)
rm(cleandeployDFslst,
deployDF_1, deployDF_2, deployDF_3)
View(cleandeployDF_2)
View(df_ax81)
#Ok so I only care about de-duped, wav file, paths. Sorry to the other valuable information stored in these things.
wavs_index81 <- str_which(df_ax81$file_path, regex(".wav$", ignore_case=TRUE, ))
df_ax81 <-  df_ax81[wavs_index81,]
#find locations where the clientid matches a value in the folder path
## first, find the unique values in my deployment info dataframes, for clientid
pattrns <- NULL
#Get the unique values of col 2 into a list, based on if they are alraedy in the list
for (thing in cleandeplydflst){
val <- unique(thing[,2]) #get unique value out of second column
if (length(pattrns) > 0){ #check if pattrns has values
if (val %in% pattrns){
#do nothing
}else{ #if the pattrns list doesn't have this value ablready
pattrns <-  append(pattrns, val) #add to list
}
}else { #else add to list
pattrns <-append(pattrns, val) #else add to list
}
}
#did that work?
pattrns #fw, shell , so yes
client_match <-  str_subset(df_ax81$file_path, regex(pattrns, ignore_case=TRUE))
head(client_match)
#let's do a filter on subdirectory 3, etc, just to make sure, I don't have, like some crazy error in there
client_match_index <-  str_which(df_ax81$file_path, regex(pattrns, ignore_case=TRUE))
df_ax81[client_match_index,] %>%
group_by(subdirectory3) %>%
summarise(n=n()) %>%
view()
##Ok, so making that happen, based on, recorder id -------------------
#use the loop to get unique values from the column in the deployment dataframes
pattrns <- NULL
#Get the unique values of col 5 into a list, based on if they are alraedy in the list
for (thing in cleandeplydflst){
val <- unique(thing[,5]) #get unique value out of 5thh  column
if (length(pattrns) > 0){ #check if pattrns has values
if (val %in% pattrns){
#do nothing
}else{ #if the pattrns list doesn't have this value ablready
pattrns <-  append(pattrns, val) #add to list
}
}else { #else add to list
pattrns <-append(pattrns, val) #else add to list
}
}
length(unique(pattrns))
#so will this be as easy as, last time?
recorderid_match <- str_subset(df_ax81$file_path, regex(pattrns, ignore_case=TRUE))
#184 matches.... out of a dataframe 9342 items long?
str_which(df_ax81, regex(pattrns[1]))
sum(str_detect(df_ax81$file_path, regex(pattrns[1]))) #there's no match to the recorder id "AMAR202.1.16000.M8EV35dB"?
#I don't know how to fact check that
sum(str_detect(df_ax81$file_path, regex(pattrns[6]))) #0?
recorderid_match
sapply(pattrns, str_locate, x=df_ax81)
str_which(df_ax81, pattrns[1])
which(df_ax81 == pattrns[1], arr.ind = TRUE)
df_ax81 %>%
group_by(subdirectory3, subdirectory4, subdirectory5, subdirectory6) %>%
summarise(n=n()) %>%
view()
#Let's try this with stationid ----------------
pattrns <- NULL
#Get the unique values of col 8 into a list, based on if they are already in the list
for (thing in cleandeplydflst){
val <-unique(thing[,8]) #get unique value out of 5thh  column
pattrns <-  append(pattrns, val) #add to list
pattrns <-  unique(pattrns)
}
length(unique(pattrns))
#total of 37 but, of unique, between all three? so I accept 22.
stationIDS_list <- pattrns
#now I need, unique period from deployment info
pattrns <-  NULL
for (thing in cleandeplydflst){
val <-unique(thing[,4]) #get unique value out of 5thh  column
pattrns <-  append(pattrns, val) #add to list
#pattrns <-  unique(pattrns)
}
#Can I find those values in the file paths anywhere?
pattrns[1] #2013-oerwinter season
a <- str_which(df_ax81$file_path, pattrns[1]) #find those file paths
df_ax81[a,] #subset the filepaths dataframe on only 2013-overwinter season matches
df_ax81[a,] %>%
count(subdirectory3, subdirectory4, subdirectory5, subdirectory6, subdirectory7,subdirectory8, sort = TRUE) %>%
view()
seasons_match <-  pattrns
#can I find, partial matches, easily?
df_ax81$file_path %>%
str_detect("2013") %>%
sum()
df_ax81$file_path %>%
str_detect("2014") %>%
sum()
station_match_index <-  str_which(df_ax81$file_path, regex(stationIDS_list, ignore_case=TRUE))
df_ax81[station_match_index]
df_ax81[station_match_index,]
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory4)
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory4) %>%
summarise(n=n)
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory4) %>%
summarise() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory4) %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory4) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[,station_match_index] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[a,] %>%
count(subdirectory3, subdirectory4, subdirectory5, subdirectory6, subdirectory7,subdirectory8, sort = TRUE) %>%
view()
stationIDS_list
x <- c("CL05", "B05", "CL5", "B5", "PL5", "PL50", "PL05")
agrep(stationIDS_list, x)
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
view()
df_ax81 %>%
group_by(subdirectory3, subdirectory4, subdirectory5, subdirectory6) %>%
summarise(n=n()) %>%
view()
station_match_index <-  str_which(df_ax81$file_path, regex(stationIDS_list, ignore_case=TRUE))
#NO wait, the problem is that I need to loop through ALL of the stationIDS and match in df_ax81$file_path, because, it's using the first only? Because I know I need 9000 ish matches to WN40 and CL5
station_match_index <- NULL
rm(val)
for(thing in stationIDS_list){
val <- str_which(df_ax81$file_path, regex(thing, ignore_case = T))
station_match_index <- append(station_match_index, val)
}
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5, subdirectory6) %>%
count() %>%
view()
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5, subdirectory6, subdirectory7) %>%
count() %>%
view()
#I guess I should make these a df, even though, they're, not, all the wav files?
sm_df <- df_ax81[[station_match_index,]]
#I guess I should make these a df, even though, they're, not, all the wav files?
sm_df <- df_ax81[station_match_index,]
View(sm_df)
View(df_ax81)
#now I need to join somehow, deployment df, with this df
df_ax81 - sm_df
#now I need to join somehow, deployment df, with this df
df_ax81[-station_match_index,]
#what are those, 100 something differences?
view(df_ax81[-station_match_index,])
View(cleandeployDF_3)
View(cleandeployDF_2)
View(cleandeployDF_1)
View(cleandeployDF_2)
View(cleandeployDF_3)
df_ax81[station_match_index,] %>%
group_by(subdirectory3, subdirectory5, subdirectory6, subdirectory7) %>%
count() %>%
view()
#now I need to join somehow, deployment df, with this df
#firstly, it's good to know, seasons are matched in the Subdirectory 5
sm_df %>%
group_by(subdirectory3, subdirectory5) %>%
count() %>%
view()
View(cleandeployDF_1)
View(cleandeployDF_2)
View(cleandeployDF_3)
